[
    {
        "description": "Temperature controller with a simple hysteresis",
        "id": "notgenerated",
        "type": "lb_thermostat",        
        "inputs": ["12dced27ba7f9f75", "d305d389a3eedeea"],
        "outputs": ["eae814ce30074b3d"],
        "input_descriptions": ["binary devices state", "temperature"],
        "output_descriptions": ["timer state"],        
        "parameters": [        
                {
                    "nametag": "lb_temperature_low",
                    "current_value": 21.0,
                    "node_id": "03e98b4532586cc8",
                    "nodekey": "func"
                },
                {
                    "nametag": "lb_temperature_high",
                    "current_value": 25.0,
                    "node_id": "03e98b4532586cc8",
                    "nodekey": "func"
                }
                                   
        ]
    },
    {
        "id": "12dced27ba7f9f75",
        "type": "function",
        "z": "c9382d53a7e690cc",
        "name": "state filter",
        "func": "\nvar newMsg = { payload: msg.payload.state};\n\nnewMsg.topic = \"state\"\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "d90bc91a45a4bcb9"
            ]
        ]
    },
    {
        "id": "d90bc91a45a4bcb9",
        "type": "change",
        "z": "c9382d53a7e690cc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "switch_state",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "eae814ce30074b3d",
        "type": "function",
        "z": "c9382d53a7e690cc",
        "name": "binary state transition",
        "func": "let old_state = flow.get(\"switch_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == \"OFF\" && new_state == \"ON\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"ON\\\"}\" };\n}\n\nif (old_state == \"ON\" && new_state == \"OFF\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"OFF\\\"}\" };\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 360,
        "wires": [
            [
                "notset"
            ]
        ]
    },
    {
        "id": "d305d389a3eedeea",
        "type": "function",
        "z": "c9382d53a7e690cc",
        "name": "convert to numeric",
        "func": "var newMsg = { payload: parseFloat(msg.payload.temperature)};\n\nnewMsg.topic = \"numeric_value\"\n\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "03e98b4532586cc8"
            ]
        ]
    },
    {
        "id": "03e98b4532586cc8",
        "type": "function",
        "z": "c9382d53a7e690cc",
        "name": "hystersis",
        "func": "let previous_value = flow.get(\"previous_value\");\nlet initialized = flow.get(\"initialized\");\n\nvar low_threshold = lb_temperature_low;\nvar high_threshold = lb_temperature_high;\n\nvar current_value = msg.payload;\n\nvar newMsg = null;\n\nif(initialized == false) {\n    if (msg.payload < low_threshold)\n        newMsg = {payload: \"ON\"};\n    initialized = true;\n}\n\nif(previous_value >= low_threshold && current_value < low_threshold) {\n    newMsg = {payload: \"ON\"};\n}\n\nif(previous_value <= high_threshold && current_value > high_threshold) {\n    newMsg = {payload: \"OFF\"};\n}\n\nreturn newMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Der Code hier wird ausgef√ºhrt,\n// wenn der Node gestartet wird\nflow.set(\"previous_value\", 0.0);\nflow.set(\"initialized\", false);",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "eae814ce30074b3d"
            ]
        ]
    }
]