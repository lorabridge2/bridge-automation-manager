[
{
    "description": "Receives binary input and holds the state for a given time",
    "id": "notgenerated",
    "type": "lb_countdown_switch",
    "inputs": ["f920bb22a0c96021", "0dc5ee85cc40772b"],
    "outputs": ["dcc55baf0f0a74e9"],
    "parameters": [        
            {
                "nametag": "lb_countdown_value",
                "current_value": 5,
                "node_id": "bb464e7c6a26041b",
                "nodekey": "func"
            }                 
    ]
},
{
    "id": "0dc5ee85cc40772b",
    "type": "function",
    "z": "db80d944fe52f664",
    "name": "state filter",
    "func": "\nvar newMsg = { payload: msg.payload.occupancy};\nnewMsg.topic = \"binary_sensor\"\n\nreturn newMsg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 540,
    "wires": [
        [
            "bb464e7c6a26041b"             
        ]
    ]
},
{
    "id": "08aea132760c61e4",
    "type": "inject",
    "z": "db80d944fe52f664",
    "name": "timestamp every 1 second",
    "props": [
        {
            "p": "payload"
        },
        {
            "p": "topic",
            "vt": "str"
        }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "trigger",
    "payload": "",
    "payloadType": "date",
    "x": 280,
    "y": 240,
    "wires": [
        [
            "bb464e7c6a26041b"
        ]
    ]
},
{
    "id": "bb464e7c6a26041b",
    "type": "function",
    "z": "db80d944fe52f664",
    "name": "countdown switch",
    "func": "\nlet counter = context.get(\"count\")\nvar newMsg = null;\n\n\n\nswitch(msg.topic) {\n\n    case \"binary_sensor\":\n             \n        if(msg.payload == true) {\n            \n            counter = lb_countdown_value;\n            context.set(\"count\", counter);\n        }\n        break;\n    case \"trigger\":\n        \n        break;\n    default:\n        return newMsg;        \n}\n\nif(counter == 0) {\n    newMsg = { payload: \"OFF\" };\n}\nelse {    \n    counter--;\n    context.set(\"count\",counter)\n    newMsg = { payload: \"ON\" };\n}\n\n\n\nreturn newMsg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "// Der Code hier wird ausgef√ºhrt,\n// wenn der Node gestartet wird\n\ncontext.set(\"count\", 0);",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 240,
    "wires": [
        [
            "dcc55baf0f0a74e9"
        ]
    ]
},
{
    "id": "dcc55baf0f0a74e9",
    "type": "function",
    "z": "db80d944fe52f664",
    "name": "binary state transition",
    "func": "if (msg.topic == \"switch_state\") {\n    context.set(\"switch_state\", msg.payload);\n    return;\n}\n\nlet old_state = context.get(\"switch_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == \"OFF\" && new_state == \"ON\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"ON\\\"}\" };\n}\n\nif (old_state == \"ON\" && new_state == \"OFF\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"OFF\\\"}\" };\n}\n\nreturn newMsg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 240,
    "wires": [
        [
            "notset"
        ]
    ]
},
{
    "id": "f920bb22a0c96021",
    "type": "function",
    "z": "db80d944fe52f664",
    "name": "state filter",
    "func": "\nvar newMsg = { payload: msg.payload.state};\n\nnewMsg.topic = \"switch_state\"\n\nreturn newMsg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 620,
    "y": 100,
    "wires": [
        [
            "dcc55baf0f0a74e9"
        ]
    ]
}
]