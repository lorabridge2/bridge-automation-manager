{
    "id": "c8c094f0c6584ace",
    "type": "tab",
    "label": "lorabridge flow",
    "disabled": true,
    "info": "True heros drink matcha.",
    "env": [],
    "nodes": [
        {
            "id": "7e3d580098b94918",
            "type": "mqtt in",
            "z": "c8c094f0c6584ace",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 520,
            "y": 380,
            "wires": [
                [
                    "bf47605f4bcd4dae"
                ]
            ]
        },
        {
            "id": "bf47605f4bcd4dae",
            "type": "function",
            "z": "c8c094f0c6584ace",
            "name": " input state filter",
            "func": "\nvar newMsg;\n\n if(msg.payload.state == \"ON\") {\n    newMsg = { payload: true};\n}\nelse if(msg.payload.state == \"OFF\") {\n    newMsg = { payload: false};\n}\n\nnewMsg.topic = \"binary_state\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 380,
            "wires": [
                [
                    "c5c5bb03553c4eaf"
                ]
            ],
            "topic": "zigbee2mqtt/0x54ef4410004dc531"
        },
        {
            "id": "e07768c59a8a4156",
            "type": "mqtt out",
            "z": "c8c094f0c6584ace",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set",
            "qos": "",
            "retain": "",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "0d4cf1425404ae49",
            "x": 760,
            "y": 320,
            "wires": []
        },
        {
            "id": "50707b70dee4861",
            "type": "function",
            "z": "c8c094f0c6584ace",
            "name": "output state generation",
            "func": "var newMsg;\n\n if(msg.payload == true) {\n    newMsg = { payload: \"{\\\"state\\\": \\\"ON\\\"}\" };\n}\nelse {\n    newMsg = { payload: \"{\\\"state\\\": \\\"OFF\\\"}\" };\n}\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 520,
            "y": 320,
            "wires": [
                [
                    "e07768c59a8a4156"
                ]
            ],
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set"
        },
        {
            "id": "cc3001f0c13c41e7",
            "type": "inject",
            "z": "c8c094f0c6584ace",
            "name": "",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "5",
            "crontab": "",
            "once": false,
            "onceDelay": 0.1,
            "topic": "time",
            "payload": "",
            "payloadType": "date",
            "x": 400,
            "y": 420,
            "wires": [
                [
                    "f2033c74a7bb4484"
                ]
            ]
        },
        {
            "id": "f2033c74a7bb4484",
            "type": "function",
            "z": "c8c094f0c6584ace",
            "name": "Timer switch",
            "func": "let unix_timestamp = msg.payload;\n\nlet set_hour_min = 9;\nlet set_minute_min = 15;\n\nlet set_hour_max = 10;\nlet set_minute_max = 15;\n\n\nlet date = new Date(unix_timestamp);\n\nlet current_hour = date.getHours();\nlet current_minute = date.getMinutes();\n\nlet current_in_minutes = current_hour*60 + current_minute;\nlet max_in_minutes = set_hour_max*60 + set_minute_max;\nlet min_in_minutes = set_hour_min*60 + set_minute_max;\n\nvar newMsg = null;\n\nif (current_in_minutes >= min_in_minutes && current_in_minutes <= max_in_minutes) {\n    \n    newMsg = { payload: true};\n}\nelse {\n    \n    newMsg = { payload: false };\n}\n\n\nreturn newMsg;\n\n",
            "outputs": 1,
            "timeout": 0,
            "noerr": 4,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 670,
            "y": 420,
            "wires": [
                [
                    "c5c5bb03553c4eaf"
                ]
            ]
        },
        {
            "id": "c5c5bb03553c4eaf",
            "type": "function",
            "z": "c8c094f0c6584ace",
            "name": "binary state transition",
            "func": "if (msg.topic == \"binary_state\") {\n    context.set(\"binary_state\", msg.payload);\n    return;\n}\n\nlet old_state = context.get(\"binary_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == false && new_state == true) {\n    newMsg = { payload: true };\n}\n\nif (old_state == true && new_state == false) {\n    newMsg = { payload: false };\n}\n\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 960,
            "y": 420,
            "wires": [
                [
                    "50707b70dee4861"
                ]
            ]
        }
    ],
    "configs": []
}