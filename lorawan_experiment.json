{
    "id": "15820c81d79e4f2b",
    "type": "tab",
    "label": "lorabridge flow",
    "disabled": true,
    "info": "True heros drink matcha.",
    "env": [],
    "nodes": [
        {
            "id": "59f27383c38b444c",
            "type": "mqtt in",
            "z": "15820c81d79e4f2b",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 520,
            "y": 380,
            "wires": [
                [
                    "36e12430eef746a0"
                ]
            ]
        },
        {
            "id": "36e12430eef746a0",
            "type": "function",
            "z": "15820c81d79e4f2b",
            "name": " input state filter",
            "func": "\nvar newMsg;\n\n if(msg.payload.state == 'ON') {\n    newMsg = { payload: true};\n}\nelse if(msg.payload.state == 'OFF') {\n    newMsg = { payload: false};\n}\n\nnewMsg.topic = \"binary_state\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 380,
            "wires": [
                [
                    "e042ab2312df4aab"
                ]
            ],
            "topic": "zigbee2mqtt/0x54ef4410004dc531"
        },
        {
            "id": "41b5a727c3854a30",
            "type": "mqtt in",
            "z": "15820c81d79e4f2b",
            "name": "",
            "topic": "zigbee2mqtt/0x00158d0007e3feb9",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 520,
            "y": 380,
            "wires": [
                [
                    "1f05191ed2e44528"
                ]
            ]
        },
        {
            "id": "1f05191ed2e44528",
            "type": "function",
            "z": "15820c81d79e4f2b",
            "name": " input state filter",
            "func": "\nvar newMsg;\n\n if(msg.payload.occupancy == True) {\n    newMsg = { payload: true};\n}\nelse if(msg.payload.occupancy == False) {\n    newMsg = { payload: false};\n}\n\nnewMsg.topic = \"binary_state\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 380,
            "wires": [
                [
                    "79efdda570714090"
                ]
            ],
            "topic": "zigbee2mqtt/0x00158d0007e3feb9"
        },
        {
            "id": "29a8c4f9211f4501",
            "type": "mqtt out",
            "z": "15820c81d79e4f2b",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set",
            "qos": "",
            "retain": "",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "0d4cf1425404ae49",
            "x": 760,
            "y": 320,
            "wires": []
        },
        {
            "id": "21569ecdb99a48fa",
            "type": "function",
            "z": "15820c81d79e4f2b",
            "name": "output state generation",
            "func": "var newMsg;\n\n if(msg.payload == true) {\n    newMsg = { payload: \"{state: True}\" };\n}\nelse {\n    newMsg = { payload: \"{state: False}\" };\n}\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 520,
            "y": 320,
            "wires": [
                [
                    "29a8c4f9211f4501"
                ]
            ],
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set"
        },
        {
            "id": "6c027a9caae54e1e",
            "type": "inject",
            "z": "15820c81d79e4f2b",
            "name": "timestamp every 1 second",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "1",
            "crontab": "",
            "once": true,
            "onceDelay": 0.1,
            "topic": "trigger",
            "payload": "",
            "payloadType": "date",
            "x": 380,
            "y": 360,
            "wires": [
                [
                    "79efdda570714090"
                ]
            ]
        },
        {
            "id": "79efdda570714090",
            "type": "function",
            "z": "15820c81d79e4f2b",
            "name": "countdown switch",
            "func": "\nlet counter = context.get(\"count\")\nvar newMsg = null;\n\n\n\nswitch(msg.topic) {\n\n    case \"binary_state\":\n             \n        if(msg.payload == true) {\n            \n            counter = 5;\n            context.set(\"count\", counter);\n        }\n        break;\n    case \"trigger\":\n        \n        break;\n    default:\n        return newMsg;        \n}\n\nif(counter == 0) {\n    newMsg = { payload: false };\n}\nelse {    \n    counter--;\n    context.set(\"count\",counter)\n    newMsg = { payload: true };\n}\n\n\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "// Der Code hier wird ausgef\u00c3\u00bchrt,\n// wenn der Node gestartet wird\n\ncontext.set(\"count\", 0);",
            "finalize": "",
            "libs": [],
            "x": 750,
            "y": 360,
            "wires": [
                [
                    "e042ab2312df4aab"
                ]
            ]
        },
        {
            "id": "e042ab2312df4aab",
            "type": "function",
            "z": "15820c81d79e4f2b",
            "name": "binary state transition",
            "func": "if (msg.topic == \"binary_state\") {\n    context.set(\"binary_state\", msg.payload);\n    return;\n}\n\nlet old_state = context.get(\"binary_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == false && new_state == true) {\n    newMsg = { payload: true };\n}\n\nif (old_state == true && new_state == false) {\n    newMsg = { payload: false };\n}\n\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1020,
            "y": 360,
            "wires": [
                [
                    "notset"
                ]
            ]
        }
    ],
    "configs": []
}