{
    "id": "206dc2216d3f4cbd",
    "type": "tab",
    "label": "lorabridge flow",
    "disabled": true,
    "info": "True heros drink matcha.",
    "env": [],
    "nodes": [
        {
            "id": "4d2eab55c91a4362",
            "type": "mqtt in",
            "z": "206dc2216d3f4cbd",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 340,
            "y": 100,
            "wires": [
                [
                    "f389cbdaf3584352"
                ]
            ]
        },
        {
            "id": "384ad08bd6414dbc",
            "type": "mqtt in",
            "z": "206dc2216d3f4cbd",
            "name": "",
            "topic": "zigbee2mqtt/0x00158d0007e3feb9",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 340,
            "y": 100,
            "wires": [
                [
                    "675ce04cb6f4af0"
                ]
            ]
        },
        {
            "id": "66586fb232da4ee3",
            "type": "mqtt out",
            "z": "206dc2216d3f4cbd",
            "name": "lb2_mqtt_out",
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set",
            "qos": "",
            "retain": "",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "0d4cf1425404ae49",
            "x": 100,
            "y": 100,
            "wires": []
        },
        {
            "id": "675ce04cb6f4af0",
            "type": "function",
            "z": "206dc2216d3f4cbd",
            "name": "state filter",
            "func": "\nvar newMsg = { payload: msg.payload.occupancy};\nnewMsg.topic = \"binary_sensor\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 480,
            "y": 540,
            "wires": [
                [
                    "b8658e18a220473c"
                ]
            ]
        },
        {
            "id": "88c2d40cb3bb4b24",
            "type": "inject",
            "z": "206dc2216d3f4cbd",
            "name": "timestamp every 1 second",
            "props": [
                {
                    "p": "payload"
                },
                {
                    "p": "topic",
                    "vt": "str"
                }
            ],
            "repeat": "1",
            "crontab": "",
            "once": true,
            "onceDelay": 0.1,
            "topic": "trigger",
            "payload": "",
            "payloadType": "date",
            "x": 280,
            "y": 240,
            "wires": [
                [
                    "b8658e18a220473c"
                ]
            ]
        },
        {
            "id": "b8658e18a220473c",
            "type": "function",
            "z": "206dc2216d3f4cbd",
            "name": "countdown switch",
            "func": "//let occupancy_state = flow.get(\"occupancy_state\")\nlet counter = flow.get(\"count\")\nvar newMsg = null;\n\n\n\nswitch(msg.topic) {\n    case \"binary_sensor\":\n             \n        if(msg.payload == true) {\n            \n            counter = 5;\n            flow.set(\"count\", counter);\n        }\n        break;\n    case \"trigger\":\n        \n        break;\n    default:\n        return newMsg;        \n}\n\nif(counter == 0) {\n    newMsg = { payload: \"OFF\" };\n}\nelse {    \n    counter--;\n    flow.set(\"count\",counter)\n    newMsg = { payload: \"ON\" };\n}\n\n\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "// Der Code hier wird ausgef\u00c3\u00bchrt,\n// wenn der Node gestartet wird\nflow.set(\"count\", 0);",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 240,
            "wires": [
                [
                    "f8ea522c1261410f"
                ]
            ]
        },
        {
            "id": "f8ea522c1261410f",
            "type": "function",
            "z": "206dc2216d3f4cbd",
            "name": "binary state transition",
            "func": "let old_state = flow.get(\"switch_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == \"OFF\" && new_state == \"ON\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"ON\\\"}\" };\n}\n\nif (old_state == \"ON\" && new_state == \"OFF\") {\n    newMsg = { payload: \"{\\\"state\\\": \\\"OFF\\\"}\" };\n}\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 880,
            "y": 240,
            "wires": [
                [
                    "66586fb232da4ee3"
                ]
            ]
        },
        {
            "id": "f389cbdaf3584352",
            "type": "function",
            "z": "206dc2216d3f4cbd",
            "name": "state filter",
            "func": "\nvar newMsg = { payload: msg.payload.state};\n\nnewMsg.topic = \"state\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 620,
            "y": 100,
            "wires": [
                [
                    "a3c97149eaaa473d"
                ]
            ]
        },
        {
            "id": "a3c97149eaaa473d",
            "type": "change",
            "z": "206dc2216d3f4cbd",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "switch_state",
                    "pt": "flow",
                    "to": "payload",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 920,
            "y": 100,
            "wires": [
                []
            ]
        }
    ],
    "configs": []
}