{
    "id": "b3b1d3363e1f4878",
    "type": "tab",
    "label": "lorabridge flow",
    "disabled": true,
    "info": "True heros drink matcha.",
    "env": [],
    "nodes": [
        {
            "id": "3a0b6689ca48430f",
            "type": "mqtt in",
            "z": "b3b1d3363e1f4878",
            "name": "",
            "topic": "zigbee2mqtt/0x00158d0002310451",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 520,
            "y": 380,
            "wires": [
                [
                    "988d951e7d7a4b8a"
                ]
            ]
        },
        {
            "id": "988d951e7d7a4b8a",
            "type": "function",
            "z": "b3b1d3363e1f4878",
            "name": " input value filter",
            "func": "var newMsg = { payload: parseFloat(msg.payload.temperature)};\n\nnewMsg.topic = \"numeric_value\"\n\nreturn newMsg;\n",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 380,
            "wires": [
                [
                    "c91136012e5d4869"
                ]
            ]
        },
        {
            "id": "1e279628343b4150",
            "type": "mqtt out",
            "z": "b3b1d3363e1f4878",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531/set",
            "qos": "",
            "retain": "",
            "respTopic": "",
            "contentType": "",
            "userProps": "",
            "correl": "",
            "expiry": "",
            "broker": "0d4cf1425404ae49",
            "x": 760,
            "y": 320,
            "wires": []
        },
        {
            "id": "4a9a9b510c4c4522",
            "type": "function",
            "z": "b3b1d3363e1f4878",
            "name": "output state generation",
            "func": "var newMsg;\n\n if(msg.payload == true) {\n    newMsg = { payload: \"{\\\"state\\\": \\\"ON\\\"}\" };\n}\nelse {\n    newMsg = { payload: \"{\\\"state\\\": \\\"OFF\\\"}\" };\n}\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 520,
            "y": 320,
            "wires": [
                [
                    "1e279628343b4150"
                ]
            ]
        },
        {
            "id": "5f03d3e6fd984112",
            "type": "mqtt in",
            "z": "b3b1d3363e1f4878",
            "name": "",
            "topic": "zigbee2mqtt/0x54ef4410004dc531",
            "qos": "2",
            "datatype": "auto-detect",
            "broker": "0d4cf1425404ae49",
            "nl": false,
            "rap": true,
            "rh": 0,
            "inputs": 0,
            "x": 520,
            "y": 380,
            "wires": [
                [
                    "1d262cd2995451b"
                ]
            ]
        },
        {
            "id": "1d262cd2995451b",
            "type": "function",
            "z": "b3b1d3363e1f4878",
            "name": " input state filter",
            "func": "\nvar newMsg;\n\n if(msg.payload.state == \"ON\") {\n    newMsg = { payload: true};\n}\nelse if(msg.payload.state == \"OFF\") {\n    newMsg = { payload: false};\n}\n\nnewMsg.topic = \"binary_state\"\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 820,
            "y": 380,
            "wires": [
                [
                    "94dbe496bd6487f"
                ]
            ]
        },
        {
            "id": "94dbe496bd6487f",
            "type": "function",
            "z": "b3b1d3363e1f4878",
            "name": "binary state transition",
            "func": "if (msg.topic == \"binary_state\") {\n    context.set(\"binary_state\", msg.payload);\n    return;\n}\n\nlet old_state = context.get(\"binary_state\");\nlet new_state = msg.payload;\n\nvar newMsg = null;\n\nif (old_state == false && new_state == true) {\n    newMsg = { payload: true };\n}\n\nif (old_state == true && new_state == false) {\n    newMsg = { payload: false };\n}\n\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 1020,
            "y": 360,
            "wires": [
                [
                    "4a9a9b510c4c4522"
                ]
            ]
        },
        {
            "id": "c91136012e5d4869",
            "type": "function",
            "z": "b3b1d3363e1f4878",
            "name": "hysteresis",
            "func": "let previous_value = context.get(\"previous_value\");\nlet initialized = context.get(\"initialized\");\n\nvar low_threshold = 21.0;\nvar high_threshold = 25.0;\n\nvar current_value = msg.payload;\n\nvar newMsg = null;\n\nif(initialized == false) {\n    if (msg.payload < low_threshold)\n        newMsg = {payload: true};\n    initialized = true;\n}\n\nif(previous_value >= low_threshold && current_value < low_threshold) {\n    newMsg = {payload: true};\n}\n\nif(previous_value <= high_threshold && current_value > high_threshold) {\n    newMsg = {payload: false};\n}\n\nreturn newMsg;",
            "outputs": 1,
            "timeout": 0,
            "noerr": 0,
            "initialize": "// Der Code hier wird ausgef\u00c3\u0192\u00c2\u00bchrt,\n// wenn der Node gestartet wird\ncontext.set(\"previous_value\", 0.0);\ncontext.set(\"initialized\", false);",
            "finalize": "",
            "libs": [],
            "x": 560,
            "y": 420,
            "wires": [
                [
                    "94dbe496bd6487f"
                ]
            ]
        }
    ],
    "configs": []
}